import { AddMerchantParams, CancelCreditCardParams, ChargeMerchantResult, CreditCardPaymentParams, ModifyMerchantParams, PaymentParams, QueryTradeInfoParams, RefundCreditCardParams, RefundEWalletParams, TradeInfo } from ".";
declare class NewebpayClient {
    partnerId: string | null;
    merchantId: string;
    hashKey: string;
    hashIV: string;
    apiEndpoint: string;
    proxySecret?: string;
    constructor(params: {
        partnerId?: string;
        merchantId: string;
        hashKey: string;
        hashIV: string;
        env: "sandbox" | "production";
        proxyEndpoint?: string;
        proxySecret?: string;
    });
    parseTradeInfo(tradeInfo: string): TradeInfo;
    getPaymentFormHTML(params: PaymentParams): string;
    queryTradeInfo(params: QueryTradeInfoParams): Promise<{
        Status: string;
        Message: string;
        Result: {
            [key: string]: any;
        };
    }>;
    refundCreditCard(params: RefundCreditCardParams): Promise<{
        Status: string;
        Message: string;
        Result: {
            [key: string]: any;
        };
    }>;
    cancelCreditCard(params: CancelCreditCardParams): Promise<{
        Status: string;
        Message: string;
        Result: {
            [key: string]: any;
        };
    }>;
    refundEWallet(params: RefundEWalletParams): Promise<{
        UID: string;
        Version: string;
        Status: string;
        Message: string;
        Result: {
            [key: string]: any;
        };
    }>;
    addMerchant(params: AddMerchantParams): Promise<{
        status: string;
        message: string;
        result: {
            [key: string]: any;
        };
    }>;
    modifyMerchant(params: ModifyMerchantParams): Promise<{
        status: string;
        message: string;
        result: {
            [key: string]: any;
        };
    }>;
    chargeMerchant(params: AddMerchantParams): Promise<ChargeMerchantResult>;
    requestCreditCardPayment: (params: CreditCardPaymentParams) => Promise<TradeInfo>;
    private buildTradeInfo;
    private buildTradeSha;
    buildCheckCode(params: {
        [key: string]: any;
    }): string;
    private sendApiRequest;
}
export default NewebpayClient;
