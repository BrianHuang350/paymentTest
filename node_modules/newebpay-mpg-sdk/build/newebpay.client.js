"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __importDefault(require("crypto"));
var axios_1 = __importDefault(require("axios"));
var form_data_1 = __importDefault(require("form-data"));
var NewebpayClient = (function () {
    function NewebpayClient(params) {
        var _this = this;
        var _a;
        this.requestCreditCardPayment = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var formData, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        formData = new form_data_1.default();
                        formData.append("MerchantID_", this.merchantId);
                        formData.append("PostData_", this.buildTradeInfo(__assign({ MerchantID: this.merchantId, TimeStamp: Math.floor(new Date().getTime() / 1000), Version: params.TokenSwitch ? "2.0" : "1.1" }, params)));
                        formData.append("Pos_", "JSON");
                        return [4, this.sendApiRequest({
                                apiPath: "/API/CreditCard/Close",
                                data: formData,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2, data];
                }
            });
        }); };
        this.sendApiRequest = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = {};
                        headers["Content-Type"] = "multipart/form-data";
                        if (this.proxySecret) {
                            headers["proxy-secret"] = this.proxySecret;
                            headers["proxy-type"] = "newebpay";
                        }
                        return [4, (0, axios_1.default)({
                                method: "post",
                                url: "".concat(this.apiEndpoint).concat(params.apiPath),
                                data: params.data,
                                headers: headers,
                            })];
                    case 1: return [2, _a.sent()];
                }
            });
        }); };
        var dryRun = params.env === "sandbox";
        this.partnerId = (_a = params.partnerId) !== null && _a !== void 0 ? _a : null;
        this.merchantId = params.merchantId;
        this.hashKey = params.hashKey;
        this.hashIV = params.hashIV;
        this.proxySecret = params.proxySecret;
        this.apiEndpoint = params.proxyEndpoint
            ? params.proxyEndpoint
            : dryRun === true
                ? "https://ccore.newebpay.com"
                : "https://core.newebpay.com";
    }
    NewebpayClient.prototype.parseTradeInfo = function (tradeInfo) {
        var decipher = crypto_1.default.createDecipheriv("aes256", this.hashKey, this.hashIV);
        decipher.setAutoPadding(false);
        var decrypted = decipher.update(tradeInfo, "hex", "utf8");
        decrypted += decipher.final("utf8");
        return JSON.parse(decrypted.replace(/[\x00-\x20]+/g, ""));
    };
    NewebpayClient.prototype.getPaymentFormHTML = function (params) {
        var _a;
        var Version = (_a = params.Version) !== null && _a !== void 0 ? _a : "2.0";
        var tradeInfo = this.buildTradeInfo(__assign({ MerchantID: this.merchantId, RespondType: "JSON", TimeStamp: Math.floor(new Date().getTime() / 1000), Version: Version, LangType: "zh-tw", LoginType: 0 }, params));
        var tradeSha = this.buildTradeSha(tradeInfo);
        var html = [];
        var paymentUrl = "".concat(this.apiEndpoint, "/MPG/mpg_gateway");
        var formId = "_auto_pay_Form_".concat(new Date().getTime());
        html.push("<form id=\"".concat(formId, "\" method=\"post\" action=\"").concat(paymentUrl, "\">"));
        html.push("<input type=\"hidden\" name=\"MerchantID\" value=\"".concat(this.merchantId, "\" />"));
        html.push("<input type=\"hidden\" name=\"Version\" value=\"".concat(Version, "\" />"));
        html.push("<input type=\"hidden\" name=\"TradeInfo\" value=\"".concat(tradeInfo, "\" />"));
        html.push("<input type=\"hidden\" name=\"TradeSha\" value=\"".concat(tradeSha, "\" />"));
        html.push("</form>");
        html.push("<script>");
        html.push("document.getElementById(\"".concat(formId, "\").submit();"));
        html.push("</script>");
        return html.join("\n");
    };
    NewebpayClient.prototype.queryTradeInfo = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var Amt, MerchantOrderNo, MerchantID, Version, TimeStamp, CheckCode, formData, data, Status, Message, Result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Amt = params.Amt, MerchantOrderNo = params.MerchantOrderNo;
                        MerchantID = this.merchantId;
                        Version = "1.3";
                        TimeStamp = Math.floor(new Date().getTime() / 1000).toString();
                        CheckCode = this.buildCheckCode({ Amt: Amt, MerchantID: MerchantID, MerchantOrderNo: MerchantOrderNo });
                        formData = new form_data_1.default();
                        formData.append("MerchantID", MerchantID);
                        formData.append("Version", Version);
                        formData.append("RespondType", "JSON");
                        formData.append("CheckValue", CheckCode);
                        formData.append("TimeStamp", TimeStamp);
                        formData.append("MerchantOrderNo", MerchantOrderNo);
                        formData.append("Amt", Amt);
                        return [4, this.sendApiRequest({
                                apiPath: "/API/QueryTradeInfo",
                                data: formData,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        Status = data.Status;
                        Message = data.Message;
                        Result = data.Result;
                        return [2, {
                                Status: Status,
                                Message: Message,
                                Result: Result,
                            }];
                }
            });
        });
    };
    NewebpayClient.prototype.refundCreditCard = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var PostData_, formData, data, Status, Message, Result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        PostData_ = this.buildTradeInfo(__assign({ RespondType: "JSON", TimeStamp: Math.floor(new Date().getTime() / 1000), Version: "1.1" }, params));
                        formData = new form_data_1.default();
                        formData.append("MerchantID_", this.merchantId);
                        formData.append("PostData_", PostData_);
                        return [4, this.sendApiRequest({
                                apiPath: "/API/CreditCard/Close",
                                data: formData,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        Status = data.Status;
                        Message = data.Message;
                        Result = data.Result;
                        return [2, {
                                Status: Status,
                                Message: Message,
                                Result: Result,
                            }];
                }
            });
        });
    };
    NewebpayClient.prototype.cancelCreditCard = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var PostData_, formData, data, Status, Message, Result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        PostData_ = this.buildTradeInfo(__assign({ RespondType: "JSON", TimeStamp: Math.floor(new Date().getTime() / 1000), Version: "1.0" }, params));
                        formData = new form_data_1.default();
                        formData.append("MerchantID_", this.merchantId);
                        formData.append("PostData_", PostData_);
                        return [4, this.sendApiRequest({
                                apiPath: "/API/CreditCard/Cancel",
                                data: formData,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        Status = data.Status;
                        Message = data.Message;
                        Result = data.Result;
                        return [2, {
                                Status: Status,
                                Message: Message,
                                Result: Result,
                            }];
                }
            });
        });
    };
    NewebpayClient.prototype.refundEWallet = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var EncryptData_, HashData_, formData, data, Status, Message, UID, Version, EncryptData, Result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        EncryptData_ = this.buildTradeInfo(__assign({ TimeStamp: Math.floor(new Date().getTime() / 1000) }, params));
                        HashData_ = this.buildTradeSha(EncryptData_);
                        formData = new form_data_1.default();
                        formData.append("UID_", this.merchantId);
                        formData.append("Version_", "1.0");
                        formData.append("EncryptData_", EncryptData_);
                        formData.append("RespondType_", "JSON");
                        formData.append("HashData_", HashData_);
                        return [4, this.sendApiRequest({
                                apiPath: "/API/EWallet/refund",
                                data: formData,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        Status = data.Status;
                        Message = data.Message;
                        UID = data.UID;
                        Version = data.Version;
                        EncryptData = data.EncryptData;
                        Result = this.parseTradeInfo(EncryptData);
                        return [2, {
                                UID: UID,
                                Version: Version,
                                Status: Status,
                                Message: Message,
                                Result: Result,
                            }];
                }
            });
        });
    };
    NewebpayClient.prototype.addMerchant = function (params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var formData, data, status, message, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.partnerId) {
                            throw new Error("Please provide PartnerID");
                        }
                        formData = new form_data_1.default();
                        formData.append("PartnerID_", this.partnerId);
                        formData.append("PostData_", this.buildTradeInfo(__assign({ TimeStamp: Math.floor(new Date().getTime() / 1000), Version: (_a = params.Version) !== null && _a !== void 0 ? _a : "1.8" }, params)));
                        return [4, this.sendApiRequest({
                                apiPath: "/API/AddMerchant",
                                data: formData,
                            })];
                    case 1:
                        data = (_b.sent()).data;
                        status = data.status;
                        message = data.message;
                        result = data.result;
                        return [2, {
                                status: status,
                                message: message,
                                result: result,
                            }];
                }
            });
        });
    };
    NewebpayClient.prototype.modifyMerchant = function (params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var formData, data, status, message, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.partnerId) {
                            throw new Error("Please provide PartnerID");
                        }
                        formData = new form_data_1.default();
                        formData.append("PartnerID_", this.partnerId);
                        formData.append("PostData_", this.buildTradeInfo(__assign({ TimeStamp: Math.floor(new Date().getTime() / 1000), Version: (_a = params.Version) !== null && _a !== void 0 ? _a : "1.7" }, params)));
                        return [4, this.sendApiRequest({
                                apiPath: "/API/AddMerchant/modify",
                                data: formData,
                            })];
                    case 1:
                        data = (_b.sent()).data;
                        status = data.status;
                        message = data.message;
                        result = data.result;
                        return [2, {
                                status: status,
                                message: message,
                                result: result,
                            }];
                }
            });
        });
    };
    NewebpayClient.prototype.chargeMerchant = function (params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var formData, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.partnerId) {
                            throw new Error("Please provide PartnerID");
                        }
                        formData = new form_data_1.default();
                        formData.append("PartnerID_", this.partnerId);
                        formData.append("PostData_", this.buildTradeInfo(__assign({ TimeStamp: Math.floor(new Date().getTime() / 1000), Version: (_a = params.Version) !== null && _a !== void 0 ? _a : "1.1" }, params)));
                        return [4, this.sendApiRequest({
                                apiPath: "/API/ChargeInstruct",
                                data: formData,
                            })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2, data];
                }
            });
        });
    };
    NewebpayClient.prototype.buildTradeInfo = function (params) {
        var postData = new URLSearchParams(params).toString();
        var cipher = crypto_1.default.createCipheriv("aes256", this.hashKey, this.hashIV);
        var encrypted = cipher.update(postData, "utf8", "hex");
        encrypted += cipher.final("hex");
        return encrypted;
    };
    NewebpayClient.prototype.buildTradeSha = function (tradeInfo) {
        var hashData = "HashKey=".concat(this.hashKey, "&").concat(tradeInfo, "&HashIV=").concat(this.hashIV);
        var encrypted = crypto_1.default
            .createHash("sha256")
            .update(hashData)
            .digest("hex")
            .toUpperCase();
        return encrypted;
    };
    NewebpayClient.prototype.buildCheckCode = function (params) {
        var data = Object.keys(params)
            .sort()
            .reduce(function (obj, key) {
            obj[key] = params[key];
            return obj;
        }, {});
        var paramsStr = new URLSearchParams(data).toString();
        var checkStr = "HashIV=".concat(this.hashIV, "&").concat(paramsStr, "&HashKey=").concat(this.hashKey);
        return crypto_1.default
            .createHash("sha256")
            .update(checkStr)
            .digest("hex")
            .toUpperCase();
    };
    return NewebpayClient;
}());
exports.default = NewebpayClient;
